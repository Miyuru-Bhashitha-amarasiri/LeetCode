class Solution {
    public double findMedianSortedArrays(int A[], int B[]) {
        int len = A.length + B.length;
        int index = len/2;

        if(len % 2 == 1) {
            return (double) kthSmallest(A, B, index, 0, A.length, 0, B.length);
        } else {
            return ((double) kthSmallest(A, B, index, 0, A.length, 0, B.length) +
                    (double) kthSmallest(A, B, index-1, 0, A.length, 0, B.length)) / 2;
        }
    }

    private int kthSmallest(int[] A, int[] B, int k, int aL, int aR, int bL, int bR){
        if(aL == aR) return B[bL+k];
        if(bL == bR) return A[aL+k];
        else{
            int midA = (aL+aR)/2;
            int midB = (bL+bR)/2;
            int lenA = midA - aL;
            int lenB = midB - bL;

            if(A[midA] <= B[midB]){
                if(k <= lenA + lenB)
                    return kthSmallest(A, B, k, aL, aR, bL, midB);
                else
                    return kthSmallest(A, B, k-lenA-1, midA+1, aR, bL, bR);
            }
            else{
                if(k <= lenA + lenB)
                    return kthSmallest(A, B, k, aL, midA, bL, bR);
                else
                    return kthSmallest(A, B, k-lenB-1, aL, aR, midB+1, bR);
            }
        }
    }
}
